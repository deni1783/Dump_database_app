Как будет работать:


Создаем файл со списком диалектов [supported_dialects_list.json]


Именования:
    *Box - класс группирует основные внутренние боксы в один



Структура проекта

    [Custom_modules]:  (для дополнительных модулей)

        [Main_window_classes]    (классы для приложения)
            - DialectListBox.py
            - WorkTemplateBox.py
            - ApplicationLayout.py  (Основной группированный класс)

            [Work_template]
                - SettingsBox.py
                - ObjectTreeBox.py
                - Log.py

                [Settings_box]
                    - Connecting.py
                    - Dump.py

                [Object_tree_box]
                    - DatabaseObjects.py
                    - RunButtons.py


        [Functions]         (набор функций для работы)

            - easy_fn.py        (для упрощения обработки значений)
            - json_fn.py        (для работы с json файлами)
            - cmd_fn.py         (для работы с командной строкой)
            - obj_tree_fn.py    (для обработки дерева объектов)
            - os_fn.py          (для работы с системой, например создание/удаление папок/файлов)
            - ui_fn.py          (для UI)
            ????  - Constants     ()       ????




    [Dialects]     (папка для диалектов, при добавлении диалекта все изменения происходят в ней)

        supported_dialects.json (файл со списком диалектов, которые добавляются в приложение)

        [UI_windows] (для каждого диалекта создаем класс рабочей области, который наследует WorkTemplateBox)
        [Queries]    (запросы для каждого диалекта:
                        1 - load_databases.sql
                        2 - load_schemes.sql
                        3 - load_tables.sql
                        Запросы должны возвращать массив элементов
                     )



    [Settings]    (для сохранения различных настроек приложения)

        connection_profiles.json    (файл содержащий сохраненные профили параметров подключений)
        custom_settings.json        (содержит индивидуальные настройки, например путь к pgadmin)



    [Log_Files]     (для сохранение логов в файлы)

    [IMG]     (для различных иконок и картинок)

    start.py  (запуск приложения)







-- UI --

1. Создаем главное окно Class ApplicationBox

    1.1 Список диалектов  Class DialectListBox

        1.1.1 Парсим файл со списком диалектов (supported_dialects_list.json)
        1.1.2 На основе полученых имен, для каждого создаем кнопки и обработчики (в обработчиках идет формирование рабочей области)

    1.2 Рабочая область Class WorkTemplateBox

        1.2.1 Создаем каркас для всех диалектов
            1.2.1.1 Общий класс Class WorkTemplateBox
                a) Class SettingsBox
                    a.1 Class SettingsConnecting (настройки подключения)
                    a.2 Class SettingsDump (настройки генерации дампа + индивидуальные настройки диалекта)

                b) Class ObjectTreeBox
                    b.1 Class TreeDatabaseObjects (список объектов базы)
                    b.2 Class TreeRunButtons (кнопки: выбор результирующей директории, запуск дампа)
                c) Class Log (Отображение хода выполнения генерации дампов)

        1.2.2 Заполняем каркас необходимыми дополнениями (индивидуальными для определенного диалекта)
            (дополнительные свойства для настроек дампов добавляем в SettingsDump)







-- WORKING --

1. Получаем список выбранных элементов из дерева объектов
2. Формируем список необходимых CMD строк для запуска генерации дампов
3. Передаем список CMD на выполнение



Каждый класс отдельного диалекта (который будет возвращай виджет в Work Template)
должен возвращать self.out_dialect_gbox  (GBOX)


При добавлении нового диалекта необходимо:
    + импорт в ApplicationLayout.py
        + нужное значение в словарь self.dt_name_template